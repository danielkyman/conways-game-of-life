{"version":3,"sources":["components/Welcome.js","Patterns.js","components/Grid.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Welcome","className","patterns","block","blinker","penta","operations","generateEmptyGrid","rows","i","push","Array","from","Grid","useState","grid","setGrid","running","setRunning","placing","setPlacing","x","y","currentPos","setCurrentPos","currentPattern","setCurrentPattern","evolutions","setEvolutions","runningRef","useRef","current","placingRef","evolutionsRef","handlePlace","pattern","runSimulation","useCallback","g","produce","gridCopy","k","neighbors","forEach","newI","newK","setTimeout","onClick","Math","random","style","gridTemplateColumns","map","col","key","onMouseEnter","tempGrid","gridTest","length","testx","testy","newGrid","handleSelect","backgroundColor","undefined","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.00334282.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./welcome.scss\";\r\n\r\nconst Welcome = () => {\r\n  return (\r\n    <div className=\"welcome-container\">\r\n      <div className=\"welcome-text-container\">\r\n      <h1>Conway's</h1>\r\n      <h1 className=\"game-of-life\">Game of life</h1>\r\n      <h2>Rules:</h2>\r\n      <ul>\r\n        <li>1. Any live cell with fewer than two live neighbours dies, as if by underpopulation.</li>\r\n        <li>2. Any live cell with two or three live neighbours lives on to the next generation.</li>\r\n        <li>3. Any live cell with more than three live neighbours dies, as if by overpopulation.</li>\r\n        <li>4. Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.</li>\r\n      </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Welcome;\r\n","const patterns = {\r\n  block: [\r\n    [0, 0],\r\n    [0, 1],\r\n    [1, 0],\r\n    [1, 1],\r\n  ],\r\n  blinker: [\r\n    [0, 0],\r\n    [1, 0],\r\n    [2, 0],\r\n  ],\r\n  penta: [\r\n    [0, 0],\r\n    [1, 0],\r\n    [2, 0],\r\n    [3, 0],\r\n    [4, 0],\r\n    [5, 0],\r\n    [6, 0],\r\n    [7, 0],\r\n    [0, 1],\r\n    [2, 1],\r\n    [3, 1],\r\n    [4, 1],\r\n    [5, 1],\r\n    [7, 1],\r\n    [0, 2],\r\n    [1, 2],\r\n    [2, 2],\r\n    [3, 2],\r\n    [4, 2],\r\n    [5, 2],\r\n    [6, 2],\r\n    [7, 2],\r\n  ],\r\n};\r\n\r\nexport default patterns;\r\n","import React, { useState, useCallback, useRef } from \"react\";\r\nimport produce from \"immer\";\r\n\r\nimport \"./grid.scss\";\r\n\r\nimport patterns from \"../Patterns\";\r\n\r\nconst numRows = 30;\r\nconst numCols = 30;\r\nconst evolution_time = 70;\r\n\r\nconst operations = [\r\n  [0, 1],\r\n  [0, -1],\r\n  [1, -1],\r\n  [-1, 1],\r\n  [1, 1],\r\n  [-1, -1],\r\n  [1, 0],\r\n  [-1, 0],\r\n];\r\n\r\nconst generateEmptyGrid = () => {\r\n  const rows = [];\r\n  for (let i = 0; i < numRows; i++) {\r\n    rows.push(Array.from(Array(numCols), () => 0));\r\n  }\r\n  return rows;\r\n};\r\n\r\nconst Grid = () => {\r\n  const [grid, setGrid] = useState(() => {\r\n    return generateEmptyGrid();\r\n  });\r\n\r\n  const [running, setRunning] = useState(false);\r\n\r\n  const [placing, setPlacing] = useState(false);\r\n\r\n  const [currentPos, setCurrentPos] = useState({ x: 0, y: 0 });\r\n\r\n  const [currentPattern, setCurrentPattern] = useState([]);\r\n\r\n  const [evolutions, setEvolutions] = useState(0);\r\n\r\n  const runningRef = useRef(running);\r\n  runningRef.current = running;\r\n\r\n  const placingRef = useRef(placing);\r\n  placingRef.current = placing;\r\n\r\n  const evolutionsRef = useRef(evolutions);\r\n  evolutionsRef.current = evolutions;\r\n\r\n  const handlePosition = (x, y) => {\r\n    setCurrentPos({ x: x, y: y });\r\n  };\r\n\r\n  const handlePlace = (pattern) => {\r\n    if (!placingRef.current) {\r\n      setCurrentPattern();\r\n      return;\r\n    }\r\n  };\r\n\r\n  const handleSelect = (x, y) => {\r\n    if (placingRef.current && currentPattern) {\r\n      const tempGrid = produce(grid, (gridTest) => {\r\n        for (let i = 0; i < currentPattern.length; i++) {\r\n          let testx = x + currentPattern[i][0];\r\n          let testy = y + currentPattern[i][1];\r\n          gridTest[testx][testy] = grid[x][y] ? 0 : 1;\r\n        }\r\n      });\r\n      setGrid(tempGrid);\r\n    } else if (!placingRef.current) {\r\n      const newGrid = produce(grid, (gridCopy) => {\r\n        gridCopy[x][y] = grid[x][y] ? 0 : 1;\r\n      });\r\n      setGrid(newGrid);\r\n    }\r\n  };\r\n\r\n  const increment = () => {\r\n    setEvolutions((evolutionsRef.current += 1));\r\n  };\r\n\r\n  const runSimulation = useCallback(() => {\r\n    if (!runningRef.current) {\r\n      return;\r\n    }\r\n    setGrid((g) => {\r\n      return produce(g, (gridCopy) => {\r\n        for (let i = 0; i < numRows; i++) {\r\n          for (let k = 0; k < numCols; k++) {\r\n            let neighbors = 0;\r\n            operations.forEach(([x, y]) => {\r\n              const newI = i + x;\r\n              const newK = k + y;\r\n              if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\r\n                neighbors += g[newI][newK];\r\n              }\r\n            });\r\n            if (neighbors < 2 || neighbors > 3) {\r\n              gridCopy[i][k] = 0;\r\n            } else if (g[i][k] === 0 && neighbors === 3) {\r\n              gridCopy[i][k] = 1;\r\n            }\r\n          }\r\n        }\r\n        if (gridCopy !== grid) {\r\n          increment();\r\n        }\r\n      });\r\n    });\r\n    setTimeout(runSimulation, evolution_time);\r\n  }, [grid]);\r\n  return (\r\n    <div className=\"interactive-container\">\r\n      <div className=\"grid-left-container\">\r\n        <div className=\"buttons-logic\">\r\n          <button\r\n            onClick={() => {\r\n              setRunning(!running);\r\n              if (!running) {\r\n                runningRef.current = true;\r\n                runSimulation();\r\n              }\r\n            }}\r\n          >\r\n            {running ? \"stop\" : \"start\"}\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              const rows = [];\r\n              for (let i = 0; i < numRows; i++) {\r\n                rows.push(\r\n                  Array.from(Array(numCols), () =>\r\n                    Math.random() > 0.7 ? 1 : 0\r\n                  )\r\n                );\r\n              }\r\n\r\n              setGrid(rows);\r\n            }}\r\n          >\r\n            random\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              setGrid(generateEmptyGrid());\r\n              setEvolutions(0);\r\n            }}\r\n          >\r\n            clear\r\n          </button>\r\n        </div>\r\n\r\n        <div\r\n          className=\"grid\"\r\n          style={{\r\n            //   display: \"grid\",\r\n            gridTemplateColumns: `repeat(${numCols}, 20px)`,\r\n          }}\r\n        >\r\n          {grid.map((rows, i) =>\r\n            rows.map((col, k) => (\r\n              <div\r\n                className=\"grid-squares\"\r\n                key={`${i}-${k}`}\r\n                onMouseEnter={() => {\r\n                  handlePosition(i, k);\r\n                }}\r\n                onClick={() => {\r\n                  handleSelect(i, k);\r\n                }}\r\n                style={{\r\n                  // width: 20,\r\n                  // height: 20,\r\n                  backgroundColor: grid[i][k] ? \"black\" : undefined,\r\n                  // border: \"solid 1px black\",\r\n                }}\r\n              />\r\n            ))\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"grid-right-container\">\r\n        <div className=\"buttons-patterns\">\r\n          <button\r\n            onClick={() => {\r\n              setPlacing(!placing);\r\n              setCurrentPattern(patterns.block);\r\n              if (!placing) {\r\n                placingRef.current = true;\r\n                // setCurrentPattern(patterns.block);\r\n                handlePlace(patterns.block);\r\n              }\r\n            }}\r\n          >\r\n            place block\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              setPlacing(!placing);\r\n              setCurrentPattern(patterns.blinker);\r\n              if (!placing) {\r\n                placingRef.current = true;\r\n                // setCurrentPattern(patterns.block);\r\n                handlePlace(patterns.blinker);\r\n              }\r\n            }}\r\n          >\r\n            place blinker\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              setPlacing(!placing);\r\n              setCurrentPattern(patterns.penta);\r\n              if (!placing) {\r\n                placingRef.current = true;\r\n                // setCurrentPattern(patterns.block);\r\n                handlePlace(patterns.penta);\r\n              }\r\n            }}\r\n          >\r\n            place penta-something\r\n          </button>\r\n        </div>\r\n        <div className=\"stats\">\r\n          <h2>\r\n            Current Position X:{currentPos.x}, y:{currentPos.y}\r\n          </h2>\r\n          <h2>There have been {evolutionsRef.current} evolutions</h2>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n","import React from 'react';\r\n\r\nimport \"./footer.scss\"\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div className=\"footer-container\">\r\n            <h1>Conway's Game of life</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from \"react\";\r\nimport \"./sass/App.scss\";\r\n\r\nimport Welcome from \"./components/Welcome\";\r\nimport Grid from \"./components/Grid\";\r\nimport Footer from \"./components/Footer\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"main-container\">\r\n      <Welcome />\r\n      <Grid />\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}